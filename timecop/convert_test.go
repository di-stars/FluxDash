package timecop

import (
	"testing"

	. "github.com/smartystreets/goconvey/convey"
)

func TestConvert(t *testing.T) {

	Convey("supportedTypes", t, func() {
		So(Units["nanoseconds"].MinRounded, ShouldEqual, 0)
		So(Units["microseconds"].MinRounded, ShouldEqual, 1)
		So(Units["milliseconds"].MinRounded, ShouldEqual, 1)
		So(Units["seconds"].MinRounded, ShouldEqual, 1)
		So(Units["minutes"].MinRounded, ShouldEqual, 1)
		So(Units["hours"].MinRounded, ShouldEqual, 1)
		So(Units["days"].MinRounded, ShouldEqual, 1)
		So(Units["years"].MinRounded, ShouldEqual, 1)
		So(Units["centuries"].MinRounded, ShouldEqual, 1)
		So(Units["millenia"].MinRounded, ShouldEqual, 1)

		So(Units["nanoseconds"].MaxRounded, ShouldEqual, 999)
		So(Units["microseconds"].MaxRounded, ShouldEqual, 999)
		So(Units["milliseconds"].MaxRounded, ShouldEqual, 999)
		So(Units["seconds"].MaxRounded, ShouldEqual, 59)
		So(Units["minutes"].MaxRounded, ShouldEqual, 59)
		So(Units["hours"].MaxRounded, ShouldEqual, 23)
		So(Units["days"].MaxRounded, ShouldEqual, 364)
		So(Units["years"].MaxRounded, ShouldEqual, 99)
		So(Units["centuries"].MaxRounded, ShouldEqual, 9)
		So(Units["millenia"].MaxRounded, ShouldEqual, 0)

		So(Units["nanoseconds"].NextRatio, ShouldEqual, 1000)
		So(Units["microseconds"].NextRatio, ShouldEqual, 1000)
		So(Units["milliseconds"].NextRatio, ShouldEqual, 1000)
		So(Units["seconds"].NextRatio, ShouldEqual, 60)
		So(Units["minutes"].NextRatio, ShouldEqual, 60)
		So(Units["hours"].NextRatio, ShouldEqual, 24)
		So(Units["days"].NextRatio, ShouldEqual, 365)
		So(Units["years"].NextRatio, ShouldEqual, 100)
		So(Units["centuries"].NextRatio, ShouldEqual, 10)
		So(Units["millenia"].NextRatio, ShouldEqual, 0)

		So(Units["nanoseconds"].Next, ShouldEqual, "microseconds")
		So(Units["microseconds"].Next, ShouldEqual, "milliseconds")
		So(Units["milliseconds"].Next, ShouldEqual, "seconds")
		So(Units["seconds"].Next, ShouldEqual, "minutes")
		So(Units["minutes"].Next, ShouldEqual, "hours")
		So(Units["hours"].Next, ShouldEqual, "days")
		So(Units["days"].Next, ShouldEqual, "years")
		So(Units["years"].Next, ShouldEqual, "centuries")
		So(Units["centuries"].Next, ShouldEqual, "millenia")
		So(Units["millenia"].Next, ShouldEqual, "")

		So(Units["nanoseconds"].Prev, ShouldEqual, "")
		So(Units["microseconds"].Prev, ShouldEqual, "nanoseconds")
		So(Units["milliseconds"].Prev, ShouldEqual, "microseconds")
		So(Units["seconds"].Prev, ShouldEqual, Units["microseconds"].Next)
		So(Units["minutes"].Prev, ShouldEqual, Units["milliseconds"].Next)
		So(Units["hours"].Prev, ShouldEqual, Units["seconds"].Next)
		So(Units["days"].Prev, ShouldEqual, Units["minutes"].Next)
		So(Units["years"].Prev, ShouldEqual, Units["hours"].Next)
		So(Units["centuries"].Prev, ShouldEqual, Units["days"].Next)
		So(Units["millenia"].Prev, ShouldEqual, Units["years"].Next)

		So(Units["nanoseconds"].NextRatio, ShouldEqual, Units["microseconds"].PrevRatio)
		So(Units["microseconds"].NextRatio, ShouldEqual, Units["milliseconds"].PrevRatio)
		So(Units["milliseconds"].NextRatio, ShouldEqual, Units["seconds"].PrevRatio)
		So(Units["seconds"].NextRatio, ShouldEqual, Units["minutes"].PrevRatio)
		So(Units["minutes"].NextRatio, ShouldEqual, Units["hours"].PrevRatio)
		So(Units["hours"].NextRatio, ShouldEqual, Units["days"].PrevRatio)
		So(Units["days"].NextRatio, ShouldEqual, Units["years"].PrevRatio)
		So(Units["years"].NextRatio, ShouldEqual, Units["centuries"].PrevRatio)
		So(Units["centuries"].NextRatio, ShouldEqual, Units["millenia"].PrevRatio)
		So(Units["millenia"].NextRatio, ShouldEqual, 0)

		So(Units["nanoseconds"].PrevRatio, ShouldEqual, 0)
		So(Units["microseconds"].PrevRatio, ShouldEqual, Units["nanoseconds"].NextRatio)
		So(Units["milliseconds"].PrevRatio, ShouldEqual, Units["microseconds"].NextRatio)
		So(Units["seconds"].PrevRatio, ShouldEqual, Units["milliseconds"].NextRatio)
		So(Units["minutes"].PrevRatio, ShouldEqual, Units["seconds"].NextRatio)
		So(Units["hours"].PrevRatio, ShouldEqual, Units["minutes"].NextRatio)
		So(Units["days"].PrevRatio, ShouldEqual, Units["hours"].NextRatio)
		So(Units["years"].PrevRatio, ShouldEqual, Units["days"].NextRatio)
		So(Units["centuries"].PrevRatio, ShouldEqual, Units["years"].NextRatio)
		So(Units["millenia"].PrevRatio, ShouldEqual, Units["centuries"].NextRatio)
	})
	Convey("return case", t, func() {
		time, unit, err := GetRoundedTime(1, "seconds")
		So(err, ShouldBeNil)
		So(time, ShouldEqual, 1)
		So(unit, ShouldEqual, "seconds")
		time, unit, err = GetRoundedTime(59, "seconds")
		So(err, ShouldBeNil)
		So(time, ShouldEqual, 59)
		So(unit, ShouldEqual, "seconds")
	})
	Convey("bad unit", t, func() {
		_, _, err := GetRoundedTime(1, "s")
		So(err, ShouldNotBeNil)
	})
	Convey("valid times", t, func() {
		_, _, err := GetRoundedTime(-1, "seconds")
		So(err, ShouldNotBeNil)
	})
	Convey("next case", t, func() {
		time, unit, err := GetRoundedTime(60, "seconds")
		So(err, ShouldBeNil)
		So(time, ShouldEqual, 1)
		So(unit, ShouldEqual, "minutes")
		time, unit, err = GetRoundedTime(1000, "millenia")
		So(err, ShouldBeNil)
		So(time, ShouldEqual, 1000)
		So(unit, ShouldEqual, "millenia")
	})
	Convey("prev case", t, func() {
		time, unit, err := GetRoundedTime(.1, "seconds")
		So(err, ShouldBeNil)
		So(time, ShouldEqual, 100)
		So(unit, ShouldEqual, "milliseconds")

		time, unit, err = GetRoundedTime(.1, "nanoseconds")
		So(err, ShouldBeNil)
		So(time, ShouldEqual, .1)
		So(unit, ShouldEqual, "nanoseconds")
	})
	Convey("GetCommaString works", t, func() {
		thing := GetCommaString(10, "seconds")
		So(thing, ShouldEqual, "10 seconds")
		thing = GetCommaString(60, "seconds")
		So(thing, ShouldEqual, "1 minutes")
		thing = GetCommaString(10000, "millenia")
		So(thing, ShouldEqual, "10,000 millenia")
	})
	Convey("bad unit CommaString", t, func() {
		thing := GetCommaString(1, "s")
		So(thing, ShouldEqual, "NaN")
	})

	Convey("Test normal nano time sample", t, func() {
		time, unit, err := GetRoundedTime(37968238, "nanoseconds")
		So(err, ShouldBeNil)
		So(time, ShouldEqual, 37.968238)
		So(unit, ShouldEqual, "milliseconds")
	})
}
